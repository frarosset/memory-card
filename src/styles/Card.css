/* Animations are based on: https://auroratide.com/posts/realistic-flip-animation/ */

.card {
  border-radius: var(--card-radius);

  width: var(--card-size, auto);
  height: var(--card-size, auto);
  aspect-ratio: 1;
  position: relative;

  transform-style: preserve-3d;
  -webkit-transform-style: preserve-3d;

  animation-duration: var(--card-transition-duration);
  animation-fill-mode: both;
  animation-timing-function: linear;
  animation-name: flip-to-front;

  touch-action: none;
}

/* Apply some perspective to the parent element to allow lifting cards up effect */
*:has(> .card) {
  perspective: var(--card-perspective);
  perspective-origin: center;
  filter: drop-shadow(var(--card-shadow));
}

.card-face {
  border-radius: inherit;
  width: 100%;
  height: 100%;

  background-position: center;
  background-size: cover;

  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
}

.card-front {
  background-image: var(--card-front-bg-image);
  display: flex;
  align-items: center;
  justify-content: center;
}

.card-content {
  /* The following rule allows to set the elements within .card-contents size based on the sizes of the container */
  container-type: size;

  border-radius: inherit;
  width: var(--card-content-size);
  height: var(--card-content-size);
}

.card-rear {
  background-image: var(--card-rear-bg-image);
  position: absolute;
  top: 0;
  left: 0;

  transform: rotateY(-180deg);
}

/* cards with default front face image ---------------------------------------- */

.info-card .card-content {
  padding: var(--info-card-content-padding);

  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
}

.info-card {
  transition: filter var(--card-transition-duration),
    opacity var(--card-transition-duration);
}
.info-card .card-content > * {
  transition: transform var(--card-transition-duration);
}

/* set background of front face (with some transparency effects) */
.info-card .card-content {
  background-image: radial-gradient(
      closest-side,
      var(--info-card-content-radial-color-0) 0%,
      var(--info-card-content-radial-color-100) 100%
    ),
    var(--info-card-content-front-bg-image);
  background-position: center;
  background-size: cover;

  filter: grayscale(var(--info-card-content-greyscale));

  color: var(--info-card-content-color);

  border-radius: inherit;
}

.cards-container:has(.info-card:hover) .info-card:not(:hover) {
  filter: grayscale(var(--info-card-no-hover-greyscale));
  opacity: var(--info-card-no-hover-opacity);
}

/* perspective */

.info-card .card-front,
.info-card .card-content {
  perspective: var(--card-perspective);
  perspective-origin: bottom;
}

.info-card .card-content {
  filter: drop-shadow(--card-shadow);
}

.info-card .card-front:hover .card-content {
  perspective-origin: var(--card-hover-perspective-x)
    var(--card-hover-perspective-y);
}

/* animations ----------------------------------------------------------- */
/* order in transform: scale rotate translate-z  rotate-y rotate-3d */
/* Note that animation-fill-mode: both; makes the animation states persist 
when the end of the animation is reached. The changing while hovering is 
applyed by changing some CSS variables (via JS). A default value is set 
for such css variables. */

.card:hover {
  box-shadow: 0 0 var(--card-hover-shadow-size, 0)
    var(--card-hover-shadow-color);
}

/* reset the styles on active status */
.card:active {
  --card-hover-scale: 1 !important;
  --card-hover-rotate3d-x: 0 !important;
  --card-hover-rotate3d-y: 0 !important;
  --card-hover-rotate3d-deg: 0deg !important;
}

/* Glowing effect based on: https://codepen.io/markmiro/pen/wbqMPa */
.card-glow {
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;

  border-radius: inherit;

  background-image: radial-gradient(
    circle at var(--card-hover-glow-x, 50%) var(--card-hover-glow-y, -20%),
    var(--card-hover-glow-color, #ffffff22),
    #0000000f
  );
  pointer-events: none;
}

@keyframes flip-to-front-ini {
  0% {
    transform: rotate(10deg) translateZ(var(--card-perspective))
      rotateY(-180deg);
  }
  100% {
    transform: scale(var(--card-hover-scale, 1)) translateZ(0) rotateY(-360deg)
      rotate3d(
        var(--card-hover-rotate3d-x, 0),
        var(--card-hover-rotate3d-y, 0),
        0,
        var(--card-hover-rotate3d-deg, 0deg)
      );
  }
}

@keyframes flip-to-front-game-over {
  0% {
    transform: rotate(10deg) translateZ(0em) rotateY(-180deg);
  }
  50% {
    transform: rotate(0deg) translateZ(var(--card-flip-height)) rotateY(-270deg);
  }
  100% {
    transform: rotate(-20deg) translateZ(0em) rotateY(-360deg)
      rotate3d(
        var(--card-hover-rotate3d-x, 0),
        var(--card-hover-rotate3d-y, 0),
        0,
        var(--card-hover-rotate3d-deg, 0deg)
      );
  }
}

@keyframes flip-to-front {
  0% {
    transform: translateZ(0em) rotateY(-180deg);
  }
  50% {
    transform: translateZ(var(--card-flip-height)) rotateY(-270deg);
  }
  100% {
    transform: scale(var(--card-hover-scale, 1)) translateZ(0em)
      rotateY(-360deg)
      rotate3d(
        var(--card-hover-rotate3d-x, 0),
        var(--card-hover-rotate3d-y, 0),
        0,
        var(--card-hover-rotate3d-deg, 0deg)
      );
  }
}

@keyframes flip-to-back {
  0% {
    transform: translateZ(0em) rotateY(0deg);
  }
  50% {
    transform: translateZ(var(--card-flip-height)) rotateY(-90deg);
  }
  100% {
    transform: translateZ(0em) rotateY(-180deg);
  }
}
